[{"authors":null,"categories":null,"content":"带ESP8285无线模块的RP2040芯片开发板使用指南 1. 前情提要 我原本使用的是一块树莓派基金会原产的Raspberry Pico W，但是有一天我突然发现它不能正常工作了，无法连接我的无线网络。经过仔细检查，我发现板子上梯形天线的一个小电容脱落了，经过一番努力，我放弃了这块板子😭。 我在淘宝上能找到的同款板子基本都是50+人民币，对我的开发用途来说有点太贵了，不划算，然后购入了一块标榜着Raspberry Pico W的开发版，商品页我喜欢的Type-C接口以及不太容易损坏的板载天线设计以及20+人民币的价格属实让我心动了。 但我买回来之后发现这只是一块模仿Raspberry Pico板子一比一复刻，并将ESP-01无线模块搬上板子的纯纯中国产产品，所有我以前根据Raspberry Pico W开发板写的代码都不能用了，因为大多数依赖网络链接的第三方库都是根据CYW43439无线模组设计的，所以我的代码不得不全！部！修！改！ 幸运的是，我成功了，但是非常折腾，这也是为何我想为与我有相似经历的朋友们提供这个指南，减少不必要的时间开销。\n1.1 为什么不再买一块Raspberry Pico W？ 首先，这块国产板子非常便宜，其次，它以不到正版一半的价格满足了我项目的全部开发需求，而且同样稳定。 以下是这两块板子的一些情况对比（RP2040 with ESP8285开发板简称 RP-ESP， Raspberry Pico W简称Pico W，下同）：\n差异 说明 备注 与无线模块的通信方式 Pico W以SPI的方式通信，而RP-ESP以UART0（GP0、GP1）与无线模块通信 RP-ESP的无线速率较Pico W会更低一些，因为ESP8286在高速波特率通信速率下会不稳定，但不影响基本使用 无线模块的能力 CYW43是一块全方位领先ESP8286的芯片（除了价格），比如支持更多的无线接入点数量、更多的协议、更完善的UDP支持、更加省电等等 RP-ESP适合那些不需要将它作为无线接入点，对网络要求没有那么高的用户 与无线模块的连接方式 与无线模块通信不可避免的会占用一些RP2040的引脚，在这个方面RP-ESP更有优势，因为它占用的引脚比Pico W更少，仅为UART0的TX、RX两个引脚（GP0，GP1）。 在Pico W上，板载LED（LED_BUILTIN）的控制交给了CYW43，所以只能输出数字信号；而RP-ESP的控制与Pico如出一辙，都可以对LED_BUILTIN引脚输出数字和模拟信号，这就意味着我们可以让板载LED闪烁或者渐变。 无线模块的可定制程度 Pico W只允许以驱动提供的方式控制无线模块，而RP-ESP可以直接对ESP8285刷入任意普通ESP8285开发板支持的固件。 需要注意的是，RP-ESP仅支持为1MB存储的ESP8285（即我们常见的ESP-01模组）开发的固件，当然也可以支持Arduino。 1.2 Arduino无需配置即可使用，为何需要这个指南？ RP-ESP这块板的ESP8285自带的是AT固件，AT指令集的版本是是停留在2016年推出的1.2版本，这是近10年前推出的系统，很多新的AT指令集都不支持，已经严重过时了。 更重要的是，这个旧版的AT固件只支持已经6年未更新过的WiFiEsp库，现今这个库已经出现了很多问题，不再适合使用了，和Pico W自带的无线网络库没有可比性。\n2. 让RP-ESP跟上时代 我们需要做一些工作，来让RP-ESP的ESP8285能够满足我们的基本需求，至少达到Pico-W 80%的可用性，这对我来说已经足够了。\n2.1 前期准备 使用AT指令的ESP-01（即搭载ESP8285核心的模块）无线模块在Arduino中并非没有支持，我十分推荐@JAndrassy的WiFiEspAT库，但要使用这个库至少需要AT固件的版本大于1.7。 因此，我们需要升级ESP8285的AT固件。\n2.1.1 固件版本选择 ESP8285/ESP8266目前经测试唯一可以使用且不会出现任何问题的版本号是1.7.4，因此我们的对比都从这个版本出发。\n版本 差异 下载方式 官方推出的AT v1.7.4固件 \\ 官网已经去除了肉眼可见的下载按钮，但还是可以通过GitHub的链接下载，AT 1.7.4固件被包含在是3.0.4版本的包中。 @loboris的ESP8266_AT_LoBo（强烈推荐，本文也基于它说明） 基于官方3.1.0的版本修改而来，对SSL、OTA等功能的支持更好，还增加了更多的AT指令。 详细的改进和下载都可以通过这个链接找到。 @JiriBilek的ESP_ATMod 较官方版本增加了对TLS 1.2的支持，但同时也去除了对UDP的支持。 详细的差异和下载可以通过这个链接查到 2.1.2 刷写工具准备 我们有两种工具可以选择，均为官方出品。\n官方推出的全平台（支持Windows、Linux、macOS）命令行刷写工具esptool。 官方推出的图形化应用程序（仅支持Windows），可直接点击链接下载。 本着方便小白用户的原则，本文主要以第二种工具来做介绍。 2.1.3 固件各部分内容介绍 以下表格文件名称均以ESP8266_AT_LoBo\\bin目录下的为例：\n名称 作用 刷写地址 bootloader.bin 引导系统启动 0x00000 upgrade\\esp8266_AT_1_2.bin 系统第一部分 0x01000 blank.bin 空 0x7e000 upgrade\\esp8266_AT_2_2.bin 系统第二部分 0x81000 esp_init_data_default_v08.bin 系统初始数据 0xfc000 blank.bin 空 0xfe000 2.2 开始刷写固件 第一步：打开软件，在弹出的窗口选择esp8285，然后点击OK: 第二步：下载Serial_port_transmission.uf2，断开RP-ESP板电源，长按下图红色框中的BOOTSEL按钮，再插上线连接至电脑，将下载好的Serial_port_transmission.uf2拖入新出现的磁盘中（一般叫做RPI-RP2），此时磁盘会自动断开，新的名为TinyUSB的串口设备将会出现在电脑中。 此时再次断开设备与电脑的连接和供电，按住下图黄色框中的BOOT按钮，再次连接电脑，此时的ESP8285将会进入可刷入状态，此时可以通过软件刷写固件，甚至是Arduino的sketch（因为其底层也是使用esptool）。 第三步：按照下图所示信息配置好软件，特别是选好右下角COM:中你RP-ESP板子对应的串口：: 如果觉得一个个配置固件地址太过麻烦，仓库中还提供了合并包供大家选择，一共有两个版本：ESP8285_1MB_1.7.4_AT.bin是官方固件，ESP8285_1MB_1.7.4_AT_Lobo.bin是ESP8266_AT_LoBo固件，强烈推荐使用后者刷入。 如果选择使用一体包刷入，请按照下图配置： 第四步：点击START按钮，等待刷写结束后，断开RP-ESP板电源后，再次连接电脑，此时任意选择一个串口助手软件，打开RP-ESP对应的串口，输入AT指令（以\\r\\n字符做结尾），你可以看到ESP8285返回的OK响应，输入AT+GMR，将可以看到返回的版本信息中显示系统为1.7.4。 2.3 配合Arduino IDE使用RP-ESP 使用Arduino写入RaspberryPi Pico的sketch，我推荐@earlephilhower的arduino-pico开发套件，不建议使用Arduino官方的Arduino Mbed OS RP2040 Boards，因为比起前者，后者要少许多功能和开发样例。 在Arduino IDE中点击上传后，下方的输出会卡在Scanning for RP2040 devices，此时断开RP-ESP板子和电脑的连接，按住2.2 开始刷写固件中第二步中红色框选的BOOTSEL按钮，再插上线连接至电脑，此时Arduino IDE将会写入sketch至RP-ESP板子看到类似Wrote xxxxxx bytes to /Volumes/RPI-RP2/NEW.UF2字样即为成功。 配合WiFiEspAT库使用时，务必记得设置Serial1的TX\\RX为GP0\\GP1，否则可能会出现找不到Wi-Fi模块的错误。与此同时，如果要用到WiFi.sntp()相关功能，务必使用ESP8266_AT_LoBo固件。 3. 个人作品 将Pico W专用的库替换后，最终的个人作品——一个可调节颜色、亮度的南瓜灯和一个可以显示日期时间、室内环境数据的小摆件，成功复活！一切都和使用Pico W时一样！ 4. 致谢 @JAndrassy的WiFiEspAT @loboris的ESP8266_AT_LoBo @JiriBilek的ESP_ATMod @earlephilhower的arduino-pico 5. 欢迎向我提问！ 如果有其他疑问，欢迎提出issue！\n","date":1744602992,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1744821001,"objectID":"172c78272955fb69f559df2fc0cbb04e","permalink":"https://blog.ourdocs.cn/zh/post/rp2040_with_esp8285_arduino_guide/","publishdate":"2025-04-14T11:56:32+08:00","relpermalink":"/zh/post/rp2040_with_esp8285_arduino_guide/","section":"post","summary":"RP2040-ESP8285开发板手把手入门指南","tags":["tutorial","bilingualism"],"title":"带ESP8285无线模块的RP2040芯片开发板使用指南","type":"post"},{"authors":null,"categories":null,"content":"众所周知，GitHub时常处于存在或是不存在的薛定谔状态之中，若是自己的代码托管在上面，在紧急情况时，必须使用魔法才能够获得。\n显而易见的是，不是每个人都是魔法师。所以，若是有一个能够存储自己的代码，并且不会失联的托管网站就好了。\n在国内规模比较大的代码托管网站是Gitee，但对于我们这种只想将自己的代码托管在网站上，而不指望有人fork的小透明来说，搭建一个属于自己的代码托管服务显然是最好的。\n比较知名的开源托管服务有：GitLab，Gitea，Gogs等。\nGitLab是功能最多，体量最庞大的。它至少需要4G的内存来支撑运行。但对于我们个人或是3-5人的小团队来说，冗杂而无必要的功能只会增加不必要的开销。\n这是一张服务对比图，来自Gitea官网\nGogs和Gitea就不一样了，它们是基于Go语言的轻量级托管服务，甚至可以在资源有限的树莓派Zero等低端微型电脑上流畅运行（当然，处理时间会比高级的要长一些。）\nGitea在Gogs的基础上增加了许多很有必要的功能，如GPG签名提交等。但是内存占用量与Gogs相比差距较大，据我的测试，在树莓派上，Gogs会占用20-30M的运存，而Gitea占用100-200M内存，所以我不建议树莓派1、2、Zero等内存在1G以下的设备安装Gitea。\n根据标题，我这一篇文章主要讲树莓派4B安装Gitea。至于树莓派Zero安装Gogs是另外一篇文章。\n一、前期准备工作 1.首先要更新树莓派上的源和软件。\nsudo apt update //更新源 sudo apt upgrade //升级软件包 2.安装依赖\nsudo apt install mariadb-server git unzip 3.完成MySQL的安装（使用安全安装）\nsudo mysql_secure_installation 在这一过程中会设置root用户的密码，这个要妥善保存，因为其他要使用MySQL服务的应用都可能要使用它。\n4.进入MySQL命令行界面\nsudo mysql -u root -p 之后你需要输入安装时设置的root用户密码。\n5.创建gitea数据库\nCREATE DATABASE gitea; 6.为了其他数据库安全起见，我们创建一个专门用来管理gitea数据库的用户\nGRANT ALL PRIVILEGES ON gogs.* TO \u0026#39;用户名\u0026#39;@\u0026#39;localhost\u0026#39; IDENTIFIED BY \u0026#39;密码\u0026#39;; 7.刷新特权表\nFLUSH PRIVILEGES; 8.接下来可以用ctrl+d或者输入exit来退出MySQL命令行模式\n9.与数据库类似，为了系统的安全，我们专门创建一个用于处理git相关事务的账户，用“ -disabled-login ”参数确保它不可作为登录的账户\nsudo adduser --disabled-login git 我在此将之命名为git，但你也可以选择其他的命名方式，不过鉴于Gitea等配置时默认都是这个名字，还是建议不要改。\n网图，我自己实现时并未截图。\n二、开始安装Gitea 1.树莓派使用的Raspberry Pi OS属于Debian的一个分支，因此它属于Linux系统。而Gitea并没有针对Linux的独立安装包，因此我们只能通过二进制文件来安装。\ncd /home/git sudo wget https://dl.gitea.io/gitea/1.12.2/gitea-1.12.2-linux-arm64 -O gitea 现在我们已经将名为gitea的二进制文件下载到git用户对应的个人文件夹下了，下载链接会随时间或是系统而变化。我使用的是树莓派官方的测试版64位系统，因此要下载arm64版本，如果是正式版或是不同架构的设备，那就应该按照自己的情况选择对应的版本。附上下载地址。\n2.接下来我们对它赋予可执行权限\nsudo chmod +x gitea 之后我们就可以直接运行来测试一下了。\n./gitea web 测试完可以直接ctrl+c终止运行来退出。\n3.如果我们不想每次关掉命令行窗口服务都会中断，我们必须将之配置为service\n有两种方式可以做到，本文只介绍其中的systemd方式，而另一种supervisor，请看官方文档。\n首先，我们要在指定目录为它创建系统服务文件\nsudo nano /etc/systemd/system/gitea.service 我在此使用的是nano，因为其操作简单，当然使用vim也是没问题的。\n之后我们需要将官方的示例代码粘贴进去，并作出修改。\n如果你按照之前的步骤配置，那么示例代码中仅有以下部分是必要的：\n[Unit] Description=Gitea (Git with a cup of tea) After=syslog.target After=network.target [Service] # Modify these two values and uncomment them if you have # repos with lots of files and get an HTTP error 500 because # of that ### #LimitMEMLOCK=infinity #LimitNOFILE=65535 RestartSec=2s Type=simple User=git Group=git WorkingDirectory=/home/pi/gitea/ //工作目录，配置在gitea文件所在的目录即可 # If using Unix socket: tells systemd to create the /run/gitea folder, which will contain the gitea.sock file # (manually creating /run/gitea doesn\u0026#39;t work, because it would not persist across reboots) #RuntimeDirectory=gitea ExecStart=/home/pi/gitea web --config /home/pi/custom/conf/app.ini //配置文件位于工作目录下的custom/conf文件夹中 Restart=always Environment=USER=git HOME=/home/git GITEA_WORK_DIR=/home/pi/ //按照工作目录配置 # If you want to bind Gitea to a port below 1024, uncomment # the two values below, or use socket activation to pass Gitea its ports as above ### #CapabilityBoundingSet=CAP_NET_BIND_SERVICE #AmbientCapabilities=CAP_NET_BIND_SERVICE ### [Install] WantedBy=multi-user.target 配置完成后，保存退出，运行以下命令将服务加载，并启动。\nsudo systemctl daemon-reload sudo systemctl start gitea 如果想要开机自启，还必须运行以下命令：\nsudo systemctl enable gitea 到此为止，安装完成。\n三、配置Gitea 1.访问你服务器所在IP地址的3000端口就会进入主界面，地址格式如下：\nhttp://\u0026lt;IP地址\u0026gt;:3000 界面如上图所示\n2.接下来点击Sign In，第一次安装会跳转至配置界面\n如上图所示\n数据库类型我们选择MySQL，用户名和密码按照我们之前的配置，使用我们专属的giteauser即可。\n域名和应用URL，如果有域名可以直接填写，没有的话可以稍后运行以下命令，编辑文件来配置：\nsudo nano /home/git/custom/conf/app.ini 电子邮箱设置需要注意的是STMP服务器地址要带端口号，如：\nstmp.qq.com:465 管理员账号不是必须的，因为系统会将创建的第一个账户默认为管理员。\n可选设置可以按需要配置，如avatar等相关设置在国内就是无效的，需要魔法才能使用。\n点击立刻安装，根据设备情况会花费不同时间，最后会看到以下界面，代表安装成功。\n四、反向代理 我们会发现如果按照上述步骤做完，是不能直接通过域名访问Gitea网站的，因此我们需要做反向代理，通过Nginx或是Apache等反向代理服务来实现直接通过域名访问。\n本文只介绍Nginx，Apache相关请看官方文档。\nNginx的反向代理官网上解释得很详细，本文只补充HTTPS相关内容。\n要配置HTTPS，有两种方式，一种是在gitea的app.ini中，按照下图指示来配置：\n我们需要在文件中设置：\nPROTOCOL = https CERT_FILE = /你的/证书/文件/地址/路径 KEY_FILE = /你的/私钥/文件/地址/路径 在此之后，需要在反向代理中将：\nproxy_pass http://localhost:3000; 修改为：\nproxy_pass https://localhost:3000; 以上是第一种方法，第二种方法是在Nginx配置文件中配置，下面给出一个配置样例：\nserver { //将http全部重定向为https listen 80; listen [::]:80; server_name git.ourdocs.cn; location / { rewrite ^(.*)$ https://$host$1 permanent; } } server { # SSL configuration # listen 443 ssl; listen [::]:443 ssl; ssl_certificate /home/pi/Csr/*.ourdocs.cn_chain.crt; ssl_certificate_key /home/pi/Csr/*.ourdocs.cn_key.key; ssl_session_timeout 5m; #请按照以下协议配置 ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #请按照以下套件配置，配置加密套件，写法遵循 openssl 标准。 ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; ssl_prefer_server_ciphers on; server_name git.ourdocs.cn; location / { proxy_pass http://localhost:3000; } } 修改完配置文件后，使用下述代码使Nginx重新加载：\nsudo nginx -s reload 本教程到此结束，附上安装完成后的截图一张：\n","date":1594771200,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1744821001,"objectID":"ef4964e86d770ef93b357b699d4541c3","permalink":"https://blog.ourdocs.cn/zh/post/gitea_on_raspberrypi/","publishdate":"2020-07-15T00:00:00Z","relpermalink":"/zh/post/gitea_on_raspberrypi/","section":"post","summary":"从零开始在树莓派上搭建自己的代码托管服务","tags":["tutorial","bilingualism"],"title":"树莓派搭建私有代码托管服务（Gitea）","type":"post"}]